#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#define buffer_size 4096

char** handle_input(size_t size);

int fork_execute(char **argv);

void print_argv_letters(char ** argv) {
 int i = 0;
 while(argv[i] != NULL) {
  int j = 0;
  while(argv[i][j] != NULL) {
   printf("%d: %c\n", j, argv[i][j]);
   ++j;
  }
 ++i;
 }
 printf("\n");
}

void print_argv(char ** argv) {
 int i = 0;
 while(argv[i] != NULL) {
  printf("%s\n", argv[i]);
 ++i;
 }
 printf("\n");
}



int main() {

 while (1) {
   char ** argv = (char **) handle_input(buffer_size);
   print_argv_letters(argv);
   printf("%s: %s\n", "printing first argument", argv[0]);
   if(strcmp(argv[0], "cd") == 0) {
    printf("cd or exit\n");
    chdir(argv[1]);
   }
   else if(strcmp(argv[0], "exit") == 0) {
    return EXIT_SUCCESS;
   }
   else {
    fork_execute(argv);
   }
   //printf("\n\n\n");
   
   free(argv);
 }
}

char** handle_input(size_t size) {
 printf("%c ", '>');
 char *input = malloc(sizeof(char) * buffer_size);
 if(input == NULL) {
  perror("Malloc for input failed");
 }
 getline(&input, &size, stdin);
 int i = 0;
 char** argv = malloc(sizeof(char) * buffer_size); 
 if(argv == NULL) {
  perror("Malloc for argv failed");
 }
 char *token = strtok(input, " ");
 while(token != NULL) {
  if(token[strlen(token) - 1] == '\n') {
   token[strlen(token) - 1] = '\0';
  }
  //token[strlen(token) - 1] = '\0';
  argv[i++] = token;
  token = strtok(NULL, " ");
 }

 return(argv);
}

int fork_execute(char **argv) {
 if(fork() == 0) {
    if (execvp(argv[0], argv) == -1) {
     perror("command failed to execute");
    }
    return EXIT_FAILURE;
   }
   else {
    int status;
    wait(&status);
   }
 return EXIT_SUCCESS;
}

